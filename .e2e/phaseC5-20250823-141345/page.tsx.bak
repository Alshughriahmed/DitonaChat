"use client";
import React, { useCallback, useEffect, useRef, useState } from "react";
import Toolbar from "@/components/chat/Toolbar";
import LowerRightQuick from "@/components/chat/LowerRightQuick";
import ChatComposer from "@/components/chat/ChatComposer";
import ChatMessages from "@/components/chat/ChatMessages";

type ChatMsg = { id: string; from: "me" | "peer"; text: string; at?: number };

const H_SWIPE_PX = 80;   // Prev/Next
const V_TOGGLE_PX = 50;  // latestâ†”history
const AUTO_DIM_MS = 5000;

export default function ChatPage() {
  const [messages, setMessages] = useState<ChatMsg[]>([
    { id: "m1", from: "peer", text: "ðŸ‘‹ Hi there" },
    { id: "m2", from: "me", text: "Hello!" },
  ]);
  const addMessage = useCallback((t: string) => {
    setMessages((xs) => [...xs, { id: String(Date.now()), from: "me", text: t }]);
  }, []);

  // Beauty toggle
  const [beautyOn, setBeautyOn] = useState(false);
  const handleBeauty = useCallback(() => setBeautyOn((v) => !v), []);
  const handleSwitchCam = useCallback(() => {}, []);

  // Dock mode
  const [dockMode, setDockMode] = useState<"latest" | "history">("latest");
  const toLatest = useCallback(() => setDockMode("latest"), []);
  const toHistory = useCallback(() => setDockMode("history"), []);

  // Swipe detection
  const startX = useRef(0);
  const startY = useRef(0);
  const active = useRef(false);

  const onPointerDown = useCallback((e: React.PointerEvent<HTMLDivElement>) => {
    active.current = true;
    startX.current = e.clientX;
    startY.current = e.clientY;
  }, []);

  const onPointerMove = useCallback((e: React.PointerEvent<HTMLDivElement>) => {
    if (!active.current) return;
    const dx = e.clientX - startX.current;
    const dy = e.clientY - startY.current;
    const ax = Math.abs(dx), ay = Math.abs(dy);

    // Vertical toggle has priority if clearly vertical
    if (ay >= V_TOGGLE_PX && ay > ax) {
      if (dy < 0) toHistory(); else toLatest();
      active.current = false;
      return;
    }
    // Horizontal prev/next
    if (ax >= H_SWIPE_PX && ax > ay) {
      if (dx > 0) handlePrev(); else handleNext();
      active.current = false;
    }
  }, [toHistory, toLatest]);

  const onPointerUp = useCallback(() => { active.current = false; }, []);

  const handlePrev = useCallback(() => {}, []);
  const handleNext = useCallback(() => {}, []);

  // auto-dim after 5s idle
  const [idle, setIdle] = useState(false);
  const idleTimer = useRef<number | null>(null);
  const bump = useCallback(() => {
    setIdle(false);
    if (idleTimer.current) window.clearTimeout(idleTimer.current);
    // @ts-ignore
    idleTimer.current = window.setTimeout(() => setIdle(true), AUTO_DIM_MS);
  }, []);
  useEffect(() => {
    bump();
    const reset = () => bump();
    const events = ["pointerdown", "mousemove", "keydown", "touchstart"];
    events.forEach((n) => window.addEventListener(n, reset, { passive: true }));
    return () => events.forEach((n) => window.removeEventListener(n, reset));
  }, [bump]);

  return (
    <main className="min-h-[100dvh] w-screen overflow-hidden text-white bg-gradient-to-b from-slate-900 via-slate-900 to-black">
      {/* Grid: 2 video rows + toolbar + composer */}
      <div
        className="grid grid-rows-[1fr_1fr_auto_auto] h-[100dvh] chat-safe-pad"
        // allow native scroll/zoom; we handle gestures manually
        style={{ touchAction: "manipulation" }}
        onPointerDown={onPointerDown}
        onPointerMove={onPointerMove}
        onPointerUp={onPointerUp}
      >
        {/* Row 1: video area A */}
        <div className="relative">
          <div className={beautyOn ? "beauty-filters h-full w-full" : "h-full w-full"} />
        </div>

        {/* Row 2: video area B + overlayed message dock + quick actions */}
        <div className="relative">
          <div className={`absolute inset-x-2 bottom-2 transition-opacity ${idle ? "opacity-70" : "opacity-100"}`}>
            <ChatMessages items={messages} mode={dockMode} />
          </div>
          <div className="absolute right-2 top-2">
            <LowerRightQuick onSwitchCam={handleSwitchCam} onBeauty={handleBeauty} beautyOn={beautyOn} />
          </div>
        </div>

        {/* Row 3: Toolbar */}
        <div className={`transition-opacity ${idle ? "opacity-70" : "opacity-100"}`}>
          <Toolbar onPrev={handlePrev} onNext={handleNext} />
        </div>

        {/* Row 4: Composer */}
        <div>
          <ChatComposer onSend={addMessage} />
        </div>
      </div>
    </main>
  );
}
